#

# This is free software, lisence use MIT.

# 

# Copyright (C) 2019 P3TERX <https://p3terx.com>

# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>

# 

# <https://github.com/KFERMercer/OpenWrt-CI>

#




name: k32020200413




on:

  push:

    branches: 

      - master

  # schedule:

  #   - cron: 0 20 * * *

  # release:

  #   types: [published]
env:



 
  CONFIG_FILE: .config

 
  REPO_URL: https://github.com/coolsnowwolf/lede
  FREE_UP_DISK: false
  REPO_BRANCH: master
  SSH_ACTIONS: true

  UPLOAD_BIN_DIR: false

  UPLOAD_FIRMWARE: true

  TZ: Asia/Shanghai





jobs:




  build:




    runs-on: ubuntu-latest




    steps:




      - name: Checkout

        uses: actions/checkout@master

        with:

          ref: master




      - name: Initialization environment

        env:

          DEBIAN_FRONTEND: noninteractive

        run: |

          docker rmi `docker images -q`

          echo "Deleting files, please wait ..."

          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php

          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*

          sudo -E apt-get update

          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler

          sudo -E apt-get -y autoremove --purge

          sudo -E apt-get clean

      - name: Clone source code
        run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

   

      - name: Load custom configuration
        run: |
          
          cd openwrt
          make defconfig
          echo "src-git lienol https://github.com/Lienol/openwrt-package" >> feeds.conf.default
          echo "src-git helloworld https://github.com/fw876/helloworld" >> feeds.conf.default
          ./scripts/feeds clean  
          ./scripts/feeds update -a  
          ./scripts/feeds install -a
          mkdir -p ./artifact/
          
      -  name: SSH connection to Actions

         uses: P3TERX/debugger-action@main

         if: env.SSH_ACTIONS == 'true'



      - name: Make download

        run: |
          cd openwrt
          make download -j8

          find dl -size -1024c -exec ls -l {} \;

          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware

        run: |
          cd openwrt
          echo -e "$(nproc) thread build."

          make -j$(nproc) V=s

      - name: Assemble artifact

        run: |

       
          cd openwrt
          mkdir -p ./artifact/
                
          find ./bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./artifact/

          find ./bin/targets/ -name "*efi*img*" | xargs -i mv -f {} ./artifact/

          find ./bin/targets/ -name "*sysupgrade*bin*" | xargs -i mv -f {} ./artifact/

          find ./bin/targets/ -name "*k3*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*tar.gz*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*psg*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*vmdk*" | xargs -i mv -f {} ./artifact/
          find ./bin/targets/ -name "*psg*" | xargs -i mv -f {} ./artifact/
          

          mv .config ./artifact/
          

      - name: Upload artifact

        uses: actions/upload-artifact@master

        with:

          name: OpenWrt firmware

          path: ./openwrt/artifact/
